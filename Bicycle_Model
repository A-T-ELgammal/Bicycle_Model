#ifndef BICYCLE_MODEL
#define BICYCLE_MODEL

#include <tuple>
#include <cmath>
#include <algorithm>

using namespace std;
using States = tuple<double, double, double>;

class BicycleModel
{
public:
    BicycleModel(const double L) : L{L <= 0 ? throw invalid_argument("Length must be positive") : L} {};

    States update(const double x, const double y, const double theta, const double v, const double delta) const;
    double confineDeltaAngle(const double delta) const;

private:
    friend class PositionController;
    static constexpr double thetaMax = M_PI / 2;
    const double L;
};

class PositionController
{
public:
    PositionController(const double Kp) : Kp{Kp} {};

    double compute(const BicycleModel &model, const double x, const double y, const double theta, const double x_d, const double y_d) const;

private:
    const double Kp;
};

#endif // BICYCLE_MODEL